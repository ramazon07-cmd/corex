"""
Views for blog app.

Generated by CoreX - Django Scaffolding Framework
"""

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView
from django.urls import reverse_lazy
from django.contrib import messages
from django.db.models import Q

from .models import Item

from rest_framework import viewsets, permissions, filters
from rest_framework.decorators import action
from rest_framework.response import Response
from django_filters.rest_framework import DjangoFilterBackend

from .api.serializers import ItemSerializer



# Template Views
class ItemListView(ListView):
    """List view for items."""
    model = Item
    template_name = 'blog/list.html'
    context_object_name = 'items'
    paginate_by = 20
    
    def get_queryset(self):
        queryset = Item.objects.filter(is_active=True)
        search = self.request.GET.get('search')
        if search:
            queryset = queryset.filter(
                Q(title__icontains=search) | Q(description__icontains=search)
            )
        return queryset


class ItemDetailView(DetailView):
    """Detail view for items."""
    model = Item
    template_name = 'blog/detail.html'
    context_object_name = 'item'


class ItemCreateView(LoginRequiredMixin, CreateView):
    """Create view for items."""
    model = Item
    template_name = 'blog/form.html'
    fields = ['title', 'description']
    success_url = reverse_lazy('blog:item_list')
    
    def form_valid(self, form):
        form.instance.author = self.request.user
        messages.success(self.request, 'Item created successfully!')
        return super().form_valid(form)


class ItemUpdateView(LoginRequiredMixin, UpdateView):
    """Update view for items."""
    model = Item
    template_name = 'blog/form.html'
    fields = ['title', 'description']
    success_url = reverse_lazy('blog:item_list')
    
    def get_queryset(self):
        return Item.objects.filter(author=self.request.user)
    
    def form_valid(self, form):
        messages.success(self.request, 'Item updated successfully!')
        return super().form_valid(form)


class ItemDeleteView(LoginRequiredMixin, DeleteView):
    """Delete view for items."""
    model = Item
    template_name = 'blog/confirm_delete.html'
    success_url = reverse_lazy('blog:item_list')
    
    def get_queryset(self):
        return Item.objects.filter(author=self.request.user)
    
    def delete(self, request, *args, **kwargs):
        messages.success(request, 'Item deleted successfully!')
        return super().delete(request, *args, **kwargs)


# Function-based views
@login_required
def item_list(request):
    """Function-based list view."""
    items = Item.objects.filter(is_active=True)
    search = request.GET.get('search')
    if search:
        items = items.filter(
            Q(title__icontains=search) | Q(description__icontains=search)
        )
    
    context = {
        'items': items,
        'search': search,
    }
    return render(request, 'blog/list.html', context)


@login_required
def item_detail(request, pk):
    """Function-based detail view."""
    item = get_object_or_404(Item, pk=pk, is_active=True)
    context = {
        'item': item,
    }
    return render(request, 'blog/detail.html', context)



# API Views
class ItemViewSet(viewsets.ModelViewSet):
    """API viewset for items."""
    queryset = Item.objects.filter(is_active=True)
    serializer_class = ItemSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    filterset_fields = ['author', 'created_at']
    search_fields = ['title', 'description']
    ordering_fields = ['title', 'created_at', 'updated_at']
    ordering = ['-created_at']
    
    def perform_create(self, serializer):
        serializer.save(author=self.request.user)
    
    @action(detail=True, methods=['post'])
    def toggle_active(self, request, pk=None):
        """Toggle item active status."""
        item = self.get_object()
        item.is_active = not item.is_active
        item.save()
        return Response({'is_active': item.is_active})
