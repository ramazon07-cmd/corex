"""
Social Views
Generated by CoreX v1.0.0
"""

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.core.paginator import Paginator
from django.db.models import Q
from django.utils.text import slugify
from .models import *



@login_required
def feed(request):
    following_users = request.user.following_relations.values_list('following', flat=True)
    posts = Post.objects.filter(
        Q(author=request.user) | Q(author__in=following_users)
    ).select_related('author')
    
    paginator = Paginator(posts, 20)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    return render(request, 'social/feed.html', {
        'page_obj': page_obj,
        'posts': page_obj
    })


@login_required
def profile(request, username):
    user = get_object_or_404(User, username=username)
    profile, created = Profile.objects.get_or_create(user=user)
    posts = user.posts.all()
    followers_count = user.followers.count()
    following_count = user.following_relations.count()
    
    is_following = False
    if request.user.is_authenticated and request.user != user:
        is_following = Follow.objects.filter(
            follower=request.user, 
            following=user
        ).exists()
    
    return render(request, 'social/profile.html', {
        'profile_user': user,
        'profile': profile,
        'posts': posts,
        'followers_count': followers_count,
        'following_count': following_count,
        'is_following': is_following
    })


@login_required
def follow_user(request, username):
    user_to_follow = get_object_or_404(User, username=username)
    
    if user_to_follow != request.user:
        follow, created = Follow.objects.get_or_create(
            follower=request.user,
            following=user_to_follow
        )
        if created:
            messages.success(request, 'You are now following {}'.format(user_to_follow.username))
        else:
            messages.info(request, 'You are already following {}'.format(user_to_follow.username))
    
    return redirect('social:profile', username=username)


@login_required
def unfollow_user(request, username):
    user_to_unfollow = get_object_or_404(User, username=username)
    
    try:
        follow = Follow.objects.get(
            follower=request.user,
            following=user_to_unfollow
        )
        follow.delete()
        messages.success(request, 'You unfollowed {}'.format(user_to_unfollow.username))
    except Follow.DoesNotExist:
        messages.error(request, 'You are not following {}'.format(user_to_unfollow.username))
    
    return redirect('social:profile', username=username)


