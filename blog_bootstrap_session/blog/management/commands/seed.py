"""
Seed data management command for blog
Generated by CoreX v1.0.0
"""

from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from django.utils import timezone
from faker import Faker
import random
from ...models import *


class Command(BaseCommand):
    help = 'Generate seed data for blog app'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--count',
            type=int,
            default=10,
            help='Number of records to create'
        )
        parser.add_argument(
            '--clean',
            action='store_true',
            help='Clean existing data before seeding'
        )
    
    def handle(self, *args, **options):
        fake = Faker()
        count = options['count']
        
        if options['clean']:
            self.stdout.write('Cleaning existing data...')
            
            Post.objects.all().delete()
            Comment.objects.all().delete()
            Category.objects.all().delete()
            Tag.objects.all().delete()
            
        
        # Create users if they don't exist
        users = list(User.objects.all())
        if len(users) < 5:
            for i in range(5 - len(users)):
                user = User.objects.create_user(
                    username=fake.user_name(),
                    email=fake.email(),
                    password='testpass123',
                    first_name=fake.first_name(),
                    last_name=fake.last_name()
                )
                users.append(user)
        
        
        # Create categories
        categories = []
        for i in range(5):
            category, created = Category.objects.get_or_create(
                name=fake.word().title(),
                defaults={
                    'slug': fake.slug(),
                    'description': fake.text()
                }
            )
            categories.append(category)
        
        # Create tags
        tags = []
        for i in range(10):
            tag, created = Tag.objects.get_or_create(
                name=fake.word(),
                defaults={'slug': fake.slug()}
            )
            tags.append(tag)
        
        # Create posts
        for i in range(count):
            post = Post.objects.create(
                title=fake.sentence(),
                slug=fake.slug(),
                author=random.choice(users),
                content=fake.text(max_nb_chars=2000),
                excerpt=fake.text(max_nb_chars=200),
                category=random.choice(categories),
                status='published',
                published_at=timezone.make_aware(fake.date_time_this_year())
            )
            post.tags.set(random.sample(tags, random.randint(1, 3)))
            
            # Create comments for each post
            for j in range(random.randint(0, 5)):
                Comment.objects.create(
                    post=post,
                    author=random.choice(users),
                    content=fake.text(max_nb_chars=500),
                    is_approved=True
                )
        
        
        
        self.stdout.write(
            self.style.SUCCESS(f'Successfully created seed data for blog')
        )