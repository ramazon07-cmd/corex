# {{ project_name }}

A Django project generated by CoreX.

## Setup

### Development Setup

1. **Clone and setup the project:**
   ```bash
   cd {{ project_name }}
   poetry install
   ```

2. **Environment Configuration:**
   ```bash
   cp .env.example .env
   # Edit .env with your configuration
   ```

3. **Database Setup:**
   {% if database == 'postgres' %}
   ```bash
   # Make sure PostgreSQL is running
   createdb {{ project_name }}
   python manage.py migrate
   ```
   {% elif database == 'mysql' %}
   ```bash
   # Make sure MySQL is running
   # Create database {{ project_name }}
   python manage.py migrate
   ```
   {% else %}
   ```bash
   python manage.py migrate
   ```
   {% endif %}

4. **Create superuser:**
   ```bash
   python manage.py createsuperuser
   ```

5. **Run development server:**
   ```bash
   python manage.py runserver
   ```

{% if docker %}
### Docker Setup

1. **Build and run with Docker:**
   ```bash
   docker-compose up --build
   ```

2. **Run migrations in Docker:**
   ```bash
   docker-compose exec web python manage.py migrate
   ```

3. **Create superuser in Docker:**
   ```bash
   docker-compose exec web python manage.py createsuperuser
   ```
{% endif %}

## Features

- Django {{ django_version }}
{% if api %}
- Django REST Framework
{% endif %}
{% if auth == 'jwt' %}
- JWT Authentication
{% elif auth == 'allauth' %}
- Social Authentication (django-allauth)
{% else %}
- Session Authentication
{% endif %}
{% if ui == 'tailwind' %}
- Tailwind CSS
{% elif ui == 'bootstrap' %}
- Bootstrap 5
{% endif %}
{% if database == 'postgres' %}
- PostgreSQL Database
{% elif database == 'mysql' %}
- MySQL Database
{% else %}
- SQLite Database
{% endif %}
- Redis Caching
- Celery Task Queue
- Docker Support
- Environment Configuration

## Project Structure

```
{{ project_name }}/
├── {{ project_name }}/          # Main project directory
│   ├── settings.py      # Django settings
│   ├── urls.py          # URL configuration
│   ├── wsgi.py          # WSGI configuration
│   └── asgi.py          # ASGI configuration
├── static/              # Static files
├── media/               # Media files
├── templates/           # Templates
{% if api %}
├── api/                 # API endpoints
{% endif %}
├── manage.py            # Django management script
├── pyproject.toml       # Poetry configuration
├── .env                 # Environment variables
{% if docker %}
├── Dockerfile           # Docker configuration
├── docker-compose.yml   # Docker Compose
{% endif %}
└── README.md           # This file
```

## Commands

### Development
- `python manage.py runserver` - Run development server
- `python manage.py migrate` - Apply database migrations
- `python manage.py createsuperuser` - Create admin user
- `python manage.py collectstatic` - Collect static files

### Testing
- `python manage.py test` - Run tests
- `coverage run manage.py test` - Run tests with coverage
- `coverage report` - Show coverage report

### CoreX Commands
- `corex app <name> --type=blog` - Generate new app
- `corex scaffold model --model=Product` - Scaffold new model
- `corex test --coverage` - Run tests with coverage
- `corex doctor` - Check project health

## Deployment

### Production Checklist

1. **Environment Variables:**
   - [ ] Set `DEBUG=False`
   - [ ] Set strong `SECRET_KEY`
   - [ ] Configure `ALLOWED_HOSTS`
   - [ ] Set database credentials
   - [ ] Configure email settings

2. **Static Files:**
   ```bash
   python manage.py collectstatic
   ```

3. **Database:**
   ```bash
   python manage.py migrate
   ```

### Docker Production
```bash
docker-compose -f docker-compose.prod.yml up --build
```

## License

MIT License