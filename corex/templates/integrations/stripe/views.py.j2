"""
Stripe Integration Views
Generated by CoreX v1.0.0
"""

import stripe
import json
from django.conf import settings
from django.http import JsonResponse, HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages

# Set Stripe API key
stripe.api_key = settings.STRIPE_SECRET_KEY


@login_required
def create_payment_intent(request):
    """Create a payment intent for Stripe"""
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            amount = int(float(data.get('amount', 0)) * 100)  # Convert to cents
            
            # Create payment intent
            intent = stripe.PaymentIntent.create(
                amount=amount,
                currency=settings.STRIPE_CURRENCY,
                customer=get_or_create_stripe_customer(request.user),
                metadata={
                    'user_id': request.user.id,
                    'user_email': request.user.email,
                }
            )
            
            return JsonResponse({
                'client_secret': intent.client_secret,
                'amount': amount,
            })
            
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=400)
    
    return JsonResponse({'error': 'Invalid request method'}, status=405)


@login_required
def payment_success(request):
    """Handle successful payment"""
    payment_intent_id = request.GET.get('payment_intent')
    
    if payment_intent_id:
        try:
            # Retrieve payment intent to verify
            intent = stripe.PaymentIntent.retrieve(payment_intent_id)
            
            if intent.status == 'succeeded':
                messages.success(request, 'Payment completed successfully!')
                # Add your post-payment logic here
                # e.g., update order status, send confirmation email, etc.
            else:
                messages.warning(request, 'Payment was not completed.')
                
        except stripe.error.StripeError as e:
            messages.error(request, f'Payment verification failed: {str(e)}')
    
    return render(request, 'payments/success.html')


@login_required
def payment_cancel(request):
    """Handle cancelled payment"""
    messages.info(request, 'Payment was cancelled.')
    return render(request, 'payments/cancel.html')


@csrf_exempt
@require_POST
def stripe_webhook(request):
    """Handle Stripe webhooks"""
    payload = request.body
    sig_header = request.META.get('HTTP_STRIPE_SIGNATURE')
    endpoint_secret = settings.STRIPE_WEBHOOK_SECRET
    
    try:
        event = stripe.Webhook.construct_event(
            payload, sig_header, endpoint_secret
        )
    except ValueError:
        # Invalid payload
        return HttpResponse(status=400)
    except stripe.error.SignatureVerificationError:
        # Invalid signature
        return HttpResponse(status=400)
    
    # Handle the event
    if event['type'] == 'payment_intent.succeeded':
        payment_intent = event['data']['object']
        handle_payment_success(payment_intent)
        
    elif event['type'] == 'payment_intent.payment_failed':
        payment_intent = event['data']['object']
        handle_payment_failure(payment_intent)
        
    else:
        print(f'Unhandled event type: {event["type"]}')
    
    return HttpResponse(status=200)


def get_or_create_stripe_customer(user):
    """Get or create a Stripe customer for the user"""
    # Check if user has a Stripe customer ID stored
    # This assumes you have a profile model or similar
    # You might need to adapt this based on your user model
    
    try:
        # Try to get existing customer
        customer = stripe.Customer.retrieve(user.stripe_customer_id)
    except (AttributeError, stripe.error.InvalidRequestError):
        # Create new customer
        customer = stripe.Customer.create(
            email=user.email,
            name=f"{user.first_name} {user.last_name}".strip(),
            metadata={'user_id': user.id}
        )
        # Save customer ID to user model
        # user.stripe_customer_id = customer.id
        # user.save()
    
    return customer.id


def handle_payment_success(payment_intent):
    """Handle successful payment webhook"""
    user_id = payment_intent.get('metadata', {}).get('user_id')
    amount = payment_intent.get('amount', 0) / 100  # Convert from cents
    
    # Add your business logic here
    # e.g., update order status, send confirmation email, etc.
    print(f"Payment succeeded for user {user_id}: ${amount}")


def handle_payment_failure(payment_intent):
    """Handle failed payment webhook"""
    user_id = payment_intent.get('metadata', {}).get('user_id')
    
    # Add your business logic here
    # e.g., notify user, update order status, etc.
    print(f"Payment failed for user {user_id}")


@login_required
def payment_page(request):
    """Display payment page"""
    context = {
        'stripe_public_key': settings.STRIPE_PUBLIC_KEY,
        'amount': request.GET.get('amount', '10.00'),  # Default amount
    }
    return render(request, 'payments/payment.html', context)