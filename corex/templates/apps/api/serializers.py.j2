"""
{{ app_name|title }} API Serializers
Generated by CoreX v1.0.0
"""

from rest_framework import serializers
from ..models import *


{% if app_type == 'blog' %}
class CategorySerializer(serializers.ModelSerializer):
    class Meta:
        model = Category
        fields = ['id', 'name', 'slug', 'description', 'created_at']
        read_only_fields = ['created_at']


class TagSerializer(serializers.ModelSerializer):
    class Meta:
        model = Tag
        fields = ['id', 'name', 'slug']


class PostSerializer(serializers.ModelSerializer):
    author = serializers.StringRelatedField(read_only=True)
    category = CategorySerializer(read_only=True)
    tags = TagSerializer(many=True, read_only=True)
    
    class Meta:
        model = Post
        fields = ['id', 'title', 'slug', 'author', 'content', 'excerpt', 
                 'category', 'tags', 'status', 'publish', 'created_at', 'updated_at']
        read_only_fields = ['created_at', 'updated_at']


class CommentSerializer(serializers.ModelSerializer):
    author = serializers.StringRelatedField(read_only=True)
    
    class Meta:
        model = Comment
        fields = ['id', 'post', 'author', 'content', 'created_at', 'active']
        read_only_fields = ['created_at']

{% elif app_type == 'shop' %}
class CategorySerializer(serializers.ModelSerializer):
    class Meta:
        model = Category
        fields = ['id', 'name', 'slug', 'description', 'image', 'parent', 'created_at']
        read_only_fields = ['created_at']


class ProductSerializer(serializers.ModelSerializer):
    category = CategorySerializer(read_only=True)
    display_price = serializers.ReadOnlyField()
    
    class Meta:
        model = Product
        fields = ['id', 'name', 'slug', 'description', 'price', 'sale_price', 
                 'display_price', 'category', 'sku', 'stock', 'available', 'featured', 
                 'image', 'created_at', 'updated_at']
        read_only_fields = ['created_at', 'updated_at']


class OrderItemSerializer(serializers.ModelSerializer):
    product = ProductSerializer(read_only=True)
    
    class Meta:
        model = OrderItem
        fields = ['id', 'product', 'quantity', 'price']


class OrderSerializer(serializers.ModelSerializer):
    user = serializers.StringRelatedField(read_only=True)
    items = OrderItemSerializer(many=True, read_only=True)
    
    class Meta:
        model = Order
        fields = ['id', 'user', 'created_at', 'updated_at', 'status', 
                 'total_amount', 'shipping_address', 'billing_address', 'items']
        read_only_fields = ['created_at', 'updated_at']

{% elif app_type == 'wiki' %}
class PageSerializer(serializers.ModelSerializer):
    author = serializers.StringRelatedField(read_only=True)
    
    class Meta:
        model = Page
        fields = ['id', 'title', 'slug', 'content', 'author', 'created_at', 
                 'updated_at', 'is_published']
        read_only_fields = ['created_at', 'updated_at']


class PageRevisionSerializer(serializers.ModelSerializer):
    editor = serializers.StringRelatedField(read_only=True)
    
    class Meta:
        model = PageRevision
        fields = ['id', 'page', 'content', 'editor', 'created_at', 'comment']
        read_only_fields = ['created_at']

{% elif app_type == 'crm' %}
class ContactSerializer(serializers.ModelSerializer):
    full_name = serializers.ReadOnlyField()
    
    class Meta:
        model = Contact
        fields = ['id', 'first_name', 'last_name', 'full_name', 'email', 
                 'phone', 'company', 'contact_type', 'created_at', 'updated_at']
        read_only_fields = ['created_at', 'updated_at']


class DealSerializer(serializers.ModelSerializer):
    contact = ContactSerializer(read_only=True)
    
    class Meta:
        model = Deal
        fields = ['id', 'title', 'contact', 'amount', 'stage', 'probability', 
                 'expected_close_date', 'created_at', 'updated_at']
        read_only_fields = ['created_at', 'updated_at']

{% elif app_type == 'social' %}
class ProfileSerializer(serializers.ModelSerializer):
    user = serializers.StringRelatedField(read_only=True)
    
    class Meta:
        model = Profile
        fields = ['id', 'user', 'bio', 'location', 'website', 'avatar']


class PostSerializer(serializers.ModelSerializer):
    author = serializers.StringRelatedField(read_only=True)
    likes_count = serializers.SerializerMethodField()
    
    class Meta:
        model = Post
        fields = ['id', 'author', 'content', 'image', 'created_at', 
                 'updated_at', 'likes_count']
        read_only_fields = ['created_at', 'updated_at']
    
    def get_likes_count(self, obj):
        return obj.likes.count()


class FollowSerializer(serializers.ModelSerializer):
    follower = serializers.StringRelatedField(read_only=True)
    following = serializers.StringRelatedField(read_only=True)
    
    class Meta:
        model = Follow
        fields = ['id', 'follower', 'following', 'created_at']
        read_only_fields = ['created_at']

{% elif app_type == 'forum' %}
class CategorySerializer(serializers.ModelSerializer):
    class Meta:
        model = Category
        fields = ['id', 'name', 'description', 'created_at']
        read_only_fields = ['created_at']


class TopicSerializer(serializers.ModelSerializer):
    category = CategorySerializer(read_only=True)
    author = serializers.StringRelatedField(read_only=True)
    posts_count = serializers.SerializerMethodField()
    
    class Meta:
        model = Topic
        fields = ['id', 'title', 'category', 'author', 'created_at', 
                 'updated_at', 'is_pinned', 'is_locked', 'posts_count']
        read_only_fields = ['created_at', 'updated_at']
    
    def get_posts_count(self, obj):
        return obj.posts.count()


class PostSerializer(serializers.ModelSerializer):
    topic = TopicSerializer(read_only=True)
    author = serializers.StringRelatedField(read_only=True)
    
    class Meta:
        model = Post
        fields = ['id', 'topic', 'author', 'content', 'created_at', 'updated_at']
        read_only_fields = ['created_at', 'updated_at']

{% else %}
class {{ app_name|title }}ItemSerializer(serializers.ModelSerializer):
    class Meta:
        model = {{ app_name|title }}Item
        fields = ['id', 'name', 'description', 'created_at', 'updated_at']
        read_only_fields = ['created_at', 'updated_at']
{% endif %}