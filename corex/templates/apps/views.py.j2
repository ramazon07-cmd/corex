{% raw %}"""{% endraw %}
{{ app_name|title }}{% raw %} Views
Generated by CoreX v1.0.0
"""

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.core.paginator import Paginator
from django.db.models import Q
from .models import *


{% endraw %}{% if app_type == 'blog' %}{% raw %}
def post_list(request):
    posts = Post.objects.filter(status='published').select_related('author', 'category')
    paginator = Paginator(posts, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    return render(request, '{% endraw %}{{ app_name }}{% raw %}/list.html', {
        'page_obj': page_obj,
        'posts': page_obj
    })


def post_detail(request, slug):
    post = get_object_or_404(Post, 
                           slug=slug,
                           status='published')
    comments = post.comments.filter(is_approved=True)
    
    # Increment view count
    post.increment_views()
    
    return render(request, '{% endraw %}{{ app_name }}{% raw %}/detail.html', {
        'post': post,
        'comments': comments
    })


def category_detail(request, slug):
    category = get_object_or_404(Category, slug=slug)
    posts = category.posts.filter(status='published')
    paginator = Paginator(posts, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    return render(request, '{% endraw %}{{ app_name }}{% raw %}/category_detail.html', {
        'category': category,
        'page_obj': page_obj,
        'posts': page_obj
    })

{% endraw %}{% elif app_type == 'shop' %}{% raw %}
def product_list(request):
    products = Product.objects.filter(is_active=True)
    category_slug = request.GET.get('category')
    
    if category_slug:
        category = get_object_or_404(Category, slug=category_slug)
        products = products.filter(category=category)
    
    paginator = Paginator(products, 12)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    categories = Category.objects.all()
    
    return render(request, '{% endraw %}{{ app_name }}{% raw %}/list.html', {
        'page_obj': page_obj,
        'products': page_obj,
        'categories': categories
    })


def product_detail(request, slug):
    product = get_object_or_404(Product, slug=slug, is_active=True)
    
    return render(request, '{% endraw %}{{ app_name }}{% raw %}/detail.html', {
        'product': product
    })


@login_required
def add_to_cart(request, product_id):
    product = get_object_or_404(Product, id=product_id, is_active=True)
    # Cart logic here
    messages.success(request, '{} added to cart!'.format(product.name))
    return redirect('{% endraw %}{{ app_name }}{% raw %}:product_detail', slug=product.slug)

{% endraw %}{% elif app_type == 'wiki' %}{% raw %}
def page_list(request):
    query = request.GET.get('q')
    pages = Page.objects.filter(is_published=True)
    
    if query:
        pages = pages.filter(
            Q(title__icontains=query) | Q(content__icontains=query)
        )
    
    paginator = Paginator(pages, 20)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    return render(request, '{% endraw %}{{ app_name }}{% raw %}/page_list.html', {
        'page_obj': page_obj,
        'pages': page_obj,
        'query': query
    })


def page_detail(request, slug):
    page = get_object_or_404(Page, slug=slug, is_published=True)
    
    return render(request, '{% endraw %}{{ app_name }}{% raw %}/page_detail.html', {
        'page': page
    })


@login_required
def page_edit(request, slug):
    page = get_object_or_404(Page, slug=slug)
    
    if request.method == 'POST':
        # Handle page editing
        pass
    
    return render(request, '{% endraw %}{{ app_name }}{% raw %}/page_edit.html', {
        'page': page
    })

{% endraw %}{% elif app_type == 'crm' %}{% raw %}
@login_required
def contact_list(request):
    contacts = Contact.objects.all()
    contact_type = request.GET.get('type')
    
    if contact_type:
        contacts = contacts.filter(contact_type=contact_type)
    
    paginator = Paginator(contacts, 20)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    return render(request, '{% endraw %}{{ app_name }}{% raw %}/contact_list.html', {
        'page_obj': page_obj,
        'contacts': page_obj
    })


@login_required
def contact_detail(request, contact_id):
    contact = get_object_or_404(Contact, id=contact_id)
    deals = contact.deals.all()
    
    return render(request, '{% endraw %}{{ app_name }}{% raw %}/contact_detail.html', {
        'contact': contact,
        'deals': deals
    })


@login_required
def deal_list(request):
    deals = Deal.objects.all().select_related('contact')
    stage = request.GET.get('stage')
    
    if stage:
        deals = deals.filter(stage=stage)
    
    paginator = Paginator(deals, 20)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    return render(request, '{% endraw %}{{ app_name }}{% raw %}/deal_list.html', {
        'page_obj': page_obj,
        'deals': page_obj
    })

{% endraw %}{% elif app_type == 'social' %}{% raw %}
@login_required
def feed(request):
    following_users = request.user.following_relations.values_list('following', flat=True)
    posts = Post.objects.filter(
        Q(author=request.user) | Q(author__in=following_users)
    ).select_related('author')
    
    paginator = Paginator(posts, 20)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    return render(request, '{% endraw %}{{ app_name }}{% raw %}/feed.html', {
        'page_obj': page_obj,
        'posts': page_obj
    })


@login_required
def profile(request, username):
    user = get_object_or_404(User, username=username)
    profile, created = Profile.objects.get_or_create(user=user)
    posts = user.posts.all()
    followers_count = user.followers.count()
    following_count = user.following_relations.count()
    
    is_following = False
    if request.user.is_authenticated and request.user != user:
        is_following = Follow.objects.filter(
            follower=request.user, 
            following=user
        ).exists()
    
    return render(request, '{% endraw %}{{ app_name }}{% raw %}/profile.html', {
        'profile_user': user,
        'profile': profile,
        'posts': posts,
        'followers_count': followers_count,
        'following_count': following_count,
        'is_following': is_following
    })


@login_required
def follow_user(request, username):
    user_to_follow = get_object_or_404(User, username=username)
    
    if user_to_follow != request.user:
        follow, created = Follow.objects.get_or_create(
            follower=request.user,
            following=user_to_follow
        )
        if created:
            messages.success(request, 'You are now following {}'.format(user_to_follow.username))
        else:
            messages.info(request, 'You are already following {}'.format(user_to_follow.username))
    
    return redirect('{% endraw %}{{ app_name }}{% raw %}:profile', username=username)


@login_required
def unfollow_user(request, username):
    user_to_unfollow = get_object_or_404(User, username=username)
    
    try:
        follow = Follow.objects.get(
            follower=request.user,
            following=user_to_unfollow
        )
        follow.delete()
        messages.success(request, 'You unfollowed {}'.format(user_to_unfollow.username))
    except Follow.DoesNotExist:
        messages.error(request, 'You are not following {}'.format(user_to_unfollow.username))
    
    return redirect('{% endraw %}{{ app_name }}{% raw %}:profile', username=username)

{% endraw %}{% elif app_type == 'forum' %}{% raw %}
def topic_list(request):
    topics = Topic.objects.all().select_related('author', 'category')
    category_slug = request.GET.get('category')
    
    if category_slug:
        category = get_object_or_404(Category, slug=category_slug)
        topics = topics.filter(category=category)
    
    paginator = Paginator(topics, 20)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    categories = Category.objects.all()
    
    return render(request, '{% endraw %}{{ app_name }}{% raw %}/topic_list.html', {
        'page_obj': page_obj,
        'topics': page_obj,
        'categories': categories
    })


def topic_detail(request, slug):
    topic = get_object_or_404(Topic, slug=slug)
    posts = topic.posts.all().select_related('author')
    
    paginator = Paginator(posts, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    return render(request, '{% endraw %}{{ app_name }}{% raw %}/topic_detail.html', {
        'topic': topic,
        'page_obj': page_obj,
        'posts': page_obj
    })

{% endraw %}{% else %}{% raw %}
def index(request):
    """Default index view"""
    return render(request, '{% endraw %}{{ app_name }}{% raw %}/index.html', {
        'app_name': '{% endraw %}{{ app_name }}{% raw %}'
    })

{% endraw %}{% endif %}{% raw %}
{% endraw %}