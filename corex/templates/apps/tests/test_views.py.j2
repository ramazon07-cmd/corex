"""
View tests for {{ app_name }} app.

Generated by CoreX - Django Scaffolding Framework
"""

from django.test import TestCase, Client
from django.contrib.auth.models import User
from django.urls import reverse
from ..models import Item


class ItemViewTest(TestCase):
    """Test cases for Item views."""
    
    def setUp(self):
        """Set up test data."""
        self.client = Client()
        self.user = User.objects.create_user(
            username='testuser',
            email='test@example.com',
            password='testpass123'
        )
        self.item = Item.objects.create(
            title='Test Item',
            description='Test Description',
            author=self.user
        )
    
    def test_item_list_view(self):
        """Test the item list view."""
        response = self.client.get(reverse('{{ app_name }}:item_list'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, '{{ app_name }}/list.html')
        self.assertContains(response, 'Test Item')
    
    def test_item_detail_view(self):
        """Test the item detail view."""
        response = self.client.get(reverse('{{ app_name }}:item_detail', args=[self.item.pk]))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, '{{ app_name }}/detail.html')
        self.assertContains(response, 'Test Item')
    
    def test_item_create_view_requires_login(self):
        """Test that item create view requires login."""
        response = self.client.get(reverse('{{ app_name }}:item_create'))
        self.assertEqual(response.status_code, 302)  # Redirect to login
    
    def test_item_create_view_with_login(self):
        """Test item create view with authenticated user."""
        self.client.login(username='testuser', password='testpass123')
        response = self.client.get(reverse('{{ app_name }}:item_create'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, '{{ app_name }}/form.html')
    
    def test_item_create_post(self):
        """Test creating an item via POST."""
        self.client.login(username='testuser', password='testpass123')
        data = {
            'title': 'New Item',
            'description': 'New Description'
        }
        response = self.client.post(reverse('{{ app_name }}:item_create'), data)
        self.assertEqual(response.status_code, 302)  # Redirect after success
        
        # Check that item was created
        new_item = Item.objects.get(title='New Item')
        self.assertEqual(new_item.author, self.user)
    
    def test_item_update_view_requires_ownership(self):
        """Test that item update view requires ownership."""
        other_user = User.objects.create_user(
            username='otheruser',
            email='other@example.com',
            password='testpass123'
        )
        self.client.login(username='otheruser', password='testpass123')
        response = self.client.get(reverse('{{ app_name }}:item_update', args=[self.item.pk]))
        self.assertEqual(response.status_code, 404)  # Not found for other user's item
    
    def test_item_update_view_with_ownership(self):
        """Test item update view with item owner."""
        self.client.login(username='testuser', password='testpass123')
        response = self.client.get(reverse('{{ app_name }}:item_update', args=[self.item.pk]))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, '{{ app_name }}/form.html')
    
    def test_item_delete_view(self):
        """Test item delete view."""
        self.client.login(username='testuser', password='testpass123')
        response = self.client.get(reverse('{{ app_name }}:item_delete', args=[self.item.pk]))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, '{{ app_name }}/confirm_delete.html')
    
    def test_item_delete_post(self):
        """Test deleting an item via POST."""
        self.client.login(username='testuser', password='testpass123')
        response = self.client.post(reverse('{{ app_name }}:item_delete', args=[self.item.pk]))
        self.assertEqual(response.status_code, 302)  # Redirect after success
        
        # Check that item was deleted
        with self.assertRaises(Item.DoesNotExist):
            Item.objects.get(pk=self.item.pk)
