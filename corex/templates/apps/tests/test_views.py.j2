"""
{{ app_name|title }} View Tests
Generated by CoreX v1.0.0
"""

from django.test import TestCase, Client
from django.urls import reverse
from django.contrib.auth.models import User
from ..models import *


{% if app_type == 'blog' %}
class BlogViewTest(TestCase):
    def setUp(self):
        self.client = Client()
        self.user = User.objects.create_user(
            username='testuser',
            email='test@example.com',
            password='testpass'
        )
        self.category = Category.objects.create(
            name='Test Category',
            slug='test-category'
        )
        self.post = Post.objects.create(
            title='Test Post',
            slug='test-post',
            author=self.user,
            content='Test content',
            category=self.category,
            status='published',
            publish='2023-01-01 12:00:00'
        )
    
    def test_post_list_view(self):
        response = self.client.get(reverse('{{ app_name }}:post_list'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Test Post')
    
    def test_post_detail_view(self):
        response = self.client.get(
            reverse('{{ app_name }}:post_detail', 
                   args=[2023, 1, 1, 'test-post'])
        )
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Test Post')

{% elif app_type == 'shop' %}
class ShopViewTest(TestCase):
    def setUp(self):
        self.client = Client()
        self.category = Category.objects.create(
            name='Test Category',
            slug='test-category'
        )
        self.product = Product.objects.create(
            name='Test Product',
            slug='test-product',
            description='Test description',
            price=99.99,
            category=self.category,
            sku='TEST001',
            stock=10
        )
    
    def test_product_list_view(self):
        response = self.client.get(reverse('{{ app_name }}:product_list'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Test Product')
    
    def test_product_detail_view(self):
        response = self.client.get(
            reverse('{{ app_name }}:product_detail', 
                   kwargs={'slug': 'test-product'})
        )
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Test Product')

{% elif app_type == 'wiki' %}
class WikiViewTest(TestCase):
    def setUp(self):
        self.client = Client()
        self.user = User.objects.create_user(
            username='testuser',
            email='test@example.com',
            password='testpass'
        )
        self.page = Page.objects.create(
            title='Test Page',
            slug='test-page',
            content='Test content',
            author=self.user,
            status='published'
        )
    
    def test_page_list_view(self):
        response = self.client.get(reverse('{{ app_name }}:page_list'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Test Page')
    
    def test_page_detail_view(self):
        response = self.client.get(
            reverse('{{ app_name }}:page_detail', 
                   kwargs={'slug': 'test-page'})
        )
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Test Page')

{% else %}
class {{ app_name|title }}ViewTest(TestCase):
    def setUp(self):
        self.client = Client()
        self.item = {{ app_name|title }}Item.objects.create(
            name='Test Item',
            description='Test description'
        )
    
    def test_item_list_view(self):
        response = self.client.get(reverse('{{ app_name }}:item_list'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Test Item')
    
    def test_item_detail_view(self):
        response = self.client.get(
            reverse('{{ app_name }}:item_detail', 
                   kwargs={'item_id': self.item.id})
        )
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Test Item')
{% endif %}