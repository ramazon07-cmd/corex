"""
{{ app_name|title }} Model Tests
Generated by CoreX v1.0.0
"""

from django.test import TestCase
from django.contrib.auth.models import User
from django.core.exceptions import ValidationError
from ..models import *


{% if app_type == 'blog' %}
class CategoryModelTest(TestCase):
    def setUp(self):
        self.category = Category.objects.create(
            name='Test Category',
            slug='test-category',
            description='Test description'
        )
    
    def test_string_representation(self):
        self.assertEqual(str(self.category), 'Test Category')
    
    def test_slug_unique(self):
        with self.assertRaises(Exception):
            Category.objects.create(
                name='Another Category',
                slug='test-category'
            )


class PostModelTest(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(
            username='testuser',
            email='test@example.com',
            password='testpass'
        )
        self.category = Category.objects.create(
            name='Test Category',
            slug='test-category'
        )
        self.post = Post.objects.create(
            title='Test Post',
            slug='test-post',
            author=self.user,
            content='Test content',
            category=self.category,
            status='published',
            publish='2023-01-01 12:00:00'
        )
    
    def test_string_representation(self):
        self.assertEqual(str(self.post), 'Test Post')
    
    def test_get_absolute_url(self):
        url = self.post.get_absolute_url()
        self.assertIn('test-post', url)

{% elif app_type == 'shop' %}
class ProductModelTest(TestCase):
    def setUp(self):
        self.category = Category.objects.create(
            name='Test Category',
            slug='test-category'
        )
        self.product = Product.objects.create(
            name='Test Product',
            slug='test-product',
            description='Test description',
            price=99.99,
            category=self.category,
            sku='TEST001',
            stock=10
        )
    
    def test_string_representation(self):
        self.assertEqual(str(self.product), 'Test Product')
    
    def test_display_price_without_sale(self):
        self.assertEqual(self.product.display_price, self.product.price)
    
    def test_display_price_with_sale(self):
        self.product.sale_price = 79.99
        self.product.save()
        self.assertEqual(self.product.display_price, self.product.sale_price)


class OrderModelTest(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(
            username='testuser',
            email='test@example.com',
            password='testpass'
        )
        self.order = Order.objects.create(
            user=self.user,
            total_amount=199.98,
            shipping_address='123 Test St',
            billing_address='123 Test St'
        )
    
    def test_string_representation(self):
        self.assertIn('testuser', str(self.order))

{% elif app_type == 'wiki' %}
class PageModelTest(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(
            username='testuser',
            email='test@example.com',
            password='testpass'
        )
        self.page = Page.objects.create(
            title='Test Page',
            slug='test-page',
            content='Test content',
            author=self.user,
            status='published'
        )
    
    def test_string_representation(self):
        self.assertEqual(str(self.page), 'Test Page')
    
    def test_get_absolute_url(self):
        url = self.page.get_absolute_url()
        self.assertIn('test-page', url)

{% elif app_type == 'crm' %}
class ContactModelTest(TestCase):
    def setUp(self):
        self.contact = Contact.objects.create(
            first_name='John',
            last_name='Doe',
            email='john@example.com',
            company='Test Company'
        )
    
    def test_string_representation(self):
        self.assertEqual(str(self.contact), 'John Doe')
    
    def test_full_name_property(self):
        self.assertEqual(self.contact.full_name, 'John Doe')


class DealModelTest(TestCase):
    def setUp(self):
        self.contact = Contact.objects.create(
            first_name='John',
            last_name='Doe',
            email='john@example.com'
        )
        self.deal = Deal.objects.create(
            title='Test Deal',
            contact=self.contact,
            amount=5000.00,
            expected_close_date='2023-12-31'
        )
    
    def test_string_representation(self):
        self.assertEqual(str(self.deal), 'Test Deal')

{% elif app_type == 'social' %}
class ProfileModelTest(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(
            username='testuser',
            email='test@example.com',
            password='testpass'
        )
        self.profile = Profile.objects.create(
            user=self.user,
            bio='Test bio',
            location='Test City'
        )
    
    def test_string_representation(self):
        self.assertEqual(str(self.profile), 'testuser Profile')


class PostModelTest(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(
            username='testuser',
            email='test@example.com',
            password='testpass'
        )
        self.post = Post.objects.create(
            author=self.user,
            content='Test post content'
        )
    
    def test_string_representation(self):
        self.assertIn('testuser', str(self.post))

{% elif app_type == 'forum' %}
class CategoryModelTest(TestCase):
    def setUp(self):
        self.category = Category.objects.create(
            name='Test Category',
            description='Test description'
        )
    
    def test_string_representation(self):
        self.assertEqual(str(self.category), 'Test Category')


class TopicModelTest(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(
            username='testuser',
            email='test@example.com',
            password='testpass'
        )
        self.category = Category.objects.create(
            name='Test Category'
        )
        self.topic = Topic.objects.create(
            title='Test Topic',
            category=self.category,
            author=self.user
        )
    
    def test_string_representation(self):
        self.assertEqual(str(self.topic), 'Test Topic')

{% else %}
class {{ app_name|title }}ItemModelTest(TestCase):
    def setUp(self):
        self.item = {{ app_name|title }}Item.objects.create(
            name='Test Item',
            description='Test description'
        )
    
    def test_string_representation(self):
        self.assertEqual(str(self.item), 'Test Item')
    
    def test_item_creation(self):
        self.assertTrue(isinstance(self.item, {{ app_name|title }}Item))
        self.assertEqual(self.item.name, 'Test Item')
{% endif %}