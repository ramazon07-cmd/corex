"""
Model tests for {{ app_name }} app.

Generated by CoreX - Django Scaffolding Framework
"""

from django.test import TestCase
from django.contrib.auth.models import User
from django.utils import timezone
from ..models import Item


class ItemModelTest(TestCase):
    """Test cases for Item model."""
    
    def setUp(self):
        """Set up test data."""
        self.user = User.objects.create_user(
            username='testuser',
            email='test@example.com',
            password='testpass123'
        )
        self.item = Item.objects.create(
            title='Test Item',
            description='Test Description',
            author=self.user
        )
    
    def test_item_creation(self):
        """Test that an item can be created."""
        self.assertEqual(self.item.title, 'Test Item')
        self.assertEqual(self.item.description, 'Test Description')
        self.assertEqual(self.item.author, self.user)
        self.assertTrue(self.item.is_active)
    
    def test_item_str_representation(self):
        """Test the string representation of an item."""
        self.assertEqual(str(self.item), 'Test Item')
    
    def test_item_ordering(self):
        """Test that items are ordered by created_at descending."""
        item2 = Item.objects.create(
            title='Test Item 2',
            description='Test Description 2',
            author=self.user
        )
        
        items = Item.objects.all()
        self.assertEqual(items[0], item2)  # Most recent first
        self.assertEqual(items[1], self.item)
    
    def test_item_get_absolute_url(self):
        """Test that get_absolute_url returns correct URL."""
        expected_url = f'/{{ app_name }}/{self.item.pk}/'
        self.assertEqual(self.item.get_absolute_url(), expected_url)
    
    def test_item_timestamps(self):
        """Test that timestamps are set correctly."""
        self.assertIsNotNone(self.item.created_at)
        self.assertIsNotNone(self.item.updated_at)
        self.assertEqual(self.item.created_at, self.item.updated_at)
    
    def test_item_update_timestamp(self):
        """Test that updated_at changes when item is modified."""
        original_updated = self.item.updated_at
        self.item.title = 'Updated Title'
        self.item.save()
        
        self.item.refresh_from_db()
        self.assertGreater(self.item.updated_at, original_updated)
