"""
Forum-specific models for {{ app_name }} app.

Generated by CoreX - Django Scaffolding Framework
"""

from django.db import models
from django.contrib.auth.models import User
from django.urls import reverse
from django.utils import timezone
from django.utils.text import slugify


class Category(models.Model):
    """Forum category model."""
    name = models.CharField(max_length=100, unique=True)
    slug = models.SlugField(max_length=100, unique=True)
    description = models.TextField(blank=True)
    order = models.PositiveIntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = 'Category'
        verbose_name_plural = 'Categories'
        ordering = ['order', 'name']
    
    def __str__(self):
        return self.name
    
    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)
    
    def get_absolute_url(self):
        return reverse('{{ app_name }}:category_detail', kwargs={'slug': self.slug})
    
    def get_topic_count(self):
        """Get number of topics in this category."""
        return self.topics.count()
    
    def get_post_count(self):
        """Get number of posts in this category."""
        return sum(topic.posts.count() for topic in self.topics.all())


class Topic(models.Model):
    """Forum topic model."""
    title = models.CharField(max_length=200)
    slug = models.SlugField(max_length=200, unique=True)
    category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name='topics')
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='{{ app_name }}_topics')
    description = models.TextField(blank=True)
    is_pinned = models.BooleanField(default=False)
    is_locked = models.BooleanField(default=False)
    is_solved = models.BooleanField(default=False)
    views = models.PositiveIntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['-is_pinned', '-updated_at']
        verbose_name = 'Topic'
        verbose_name_plural = 'Topics'
    
    def __str__(self):
        return self.title
    
    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.title)
        super().save(*args, **kwargs)
    
    def get_absolute_url(self):
        return reverse('{{ app_name }}:topic_detail', kwargs={'slug': self.slug})
    
    def get_post_count(self):
        """Get number of posts in this topic."""
        return self.posts.count()
    
    def get_last_post(self):
        """Get the most recent post in this topic."""
        return self.posts.order_by('-created_at').first()
    
    def increment_views(self):
        """Increment view count."""
        self.views += 1
        self.save(update_fields=['views'])


class Post(models.Model):
    """Forum post model."""
    topic = models.ForeignKey(Topic, on_delete=models.CASCADE, related_name='posts')
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='{{ app_name }}_posts')
    content = models.TextField()
    is_solution = models.BooleanField(default=False)
    is_edited = models.BooleanField(default=False)
    edited_at = models.DateTimeField(blank=True, null=True)
    edited_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='{{ app_name }}_edited_posts')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['created_at']
        verbose_name = 'Post'
        verbose_name_plural = 'Posts'
    
    def __str__(self):
        return f'Post by {self.author.username} in {self.topic.title}'
    
    def get_absolute_url(self):
        return f"{self.topic.get_absolute_url()}#post-{self.id}"
    
    def save(self, *args, **kwargs):
        # Update topic's updated_at when a new post is added
        if not self.pk:  # New post
            self.topic.updated_at = timezone.now()
            self.topic.save(update_fields=['updated_at'])
        super().save(*args, **kwargs)
    
    def mark_as_solution(self):
        """Mark this post as the solution to the topic."""
        # Remove solution status from other posts
        self.topic.posts.update(is_solution=False)
        self.is_solution = True
        self.save()
        # Mark topic as solved
        self.topic.is_solved = True
        self.topic.save(update_fields=['is_solved'])


class PostVote(models.Model):
    """Post voting model."""
    VOTE_CHOICES = [
        (1, 'Upvote'),
        (-1, 'Downvote'),
    ]
    
    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='votes')
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='{{ app_name }}_votes')
    vote = models.SmallIntegerField(choices=VOTE_CHOICES)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        unique_together = ['post', 'user']
        verbose_name = 'Post Vote'
        verbose_name_plural = 'Post Votes'
    
    def __str__(self):
        vote_type = 'Upvote' if self.vote == 1 else 'Downvote'
        return f'{vote_type} by {self.user.username} on post {self.post.id}'


class UserProfile(models.Model):
    """Extended user profile for forum users."""
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='{{ app_name }}_profile')
    title = models.CharField(max_length=100, blank=True)
    signature = models.TextField(max_length=500, blank=True)
    avatar = models.ImageField(upload_to='forum/avatars/', blank=True, null=True)
    reputation = models.IntegerField(default=0)
    posts_count = models.PositiveIntegerField(default=0)
    topics_count = models.PositiveIntegerField(default=0)
    last_activity = models.DateTimeField(auto_now=True)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = 'User Profile'
        verbose_name_plural = 'User Profiles'
    
    def __str__(self):
        return f'{self.user.username} Profile'
    
    def update_stats(self):
        """Update user statistics."""
        self.posts_count = self.user.{{ app_name }}_posts.count()
        self.topics_count = self.user.{{ app_name }}_topics.count()
        self.save(update_fields=['posts_count', 'topics_count'])
    
    def add_reputation(self, points):
        """Add reputation points."""
        self.reputation += points
        self.save(update_fields=['reputation'])