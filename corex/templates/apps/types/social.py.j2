"""
Social-specific models for {{ app_name }} app.

Generated by CoreX - Django Scaffolding Framework
"""

from django.db import models
from django.contrib.auth.models import User
from django.urls import reverse
from django.utils import timezone
from django.utils.text import slugify


class Profile(models.Model):
    """Extended user profile for social features."""
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='{{ app_name }}_profile')
    bio = models.TextField(max_length=500, blank=True)
    avatar = models.ImageField(upload_to='social/avatars/', blank=True, null=True)
    cover_photo = models.ImageField(upload_to='social/covers/', blank=True, null=True)
    website = models.URLField(blank=True)
    location = models.CharField(max_length=100, blank=True)
    birth_date = models.DateField(blank=True, null=True)
    is_private = models.BooleanField(default=False)
    followers_count = models.PositiveIntegerField(default=0)
    following_count = models.PositiveIntegerField(default=0)
    posts_count = models.PositiveIntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = 'Profile'
        verbose_name_plural = 'Profiles'
    
    def __str__(self):
        return f'{self.user.username} Profile'
    
    def get_absolute_url(self):
        return reverse('{{ app_name }}:profile_detail', kwargs={'username': self.user.username})
    
    def update_counts(self):
        """Update follower/following/posts counts."""
        self.followers_count = self.user.{{ app_name }}_followers.count()
        self.following_count = self.user.{{ app_name }}_following.count()
        self.posts_count = self.user.{{ app_name }}_posts.count()
        self.save(update_fields=['followers_count', 'following_count', 'posts_count'])


class Follow(models.Model):
    """User following model."""
    follower = models.ForeignKey(User, on_delete=models.CASCADE, related_name='{{ app_name }}_following')
    following = models.ForeignKey(User, on_delete=models.CASCADE, related_name='{{ app_name }}_followers')
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        unique_together = ['follower', 'following']
        verbose_name = 'Follow'
        verbose_name_plural = 'Follows'
        ordering = ['-created_at']
    
    def __str__(self):
        return f'{self.follower.username} follows {self.following.username}'
    
    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        # Update counts for both users
        if hasattr(self.follower, '{{ app_name }}_profile'):
            self.follower.{{ app_name }}_profile.update_counts()
        if hasattr(self.following, '{{ app_name }}_profile'):
            self.following.{{ app_name }}_profile.update_counts()
    
    def delete(self, *args, **kwargs):
        follower = self.follower
        following = self.following
        super().delete(*args, **kwargs)
        # Update counts after deletion
        if hasattr(follower, '{{ app_name }}_profile'):
            follower.{{ app_name }}_profile.update_counts()
        if hasattr(following, '{{ app_name }}_profile'):
            following.{{ app_name }}_profile.update_counts()


class Post(models.Model):
    """Social media post model."""
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='{{ app_name }}_posts')
    content = models.TextField(max_length=2000)
    image = models.ImageField(upload_to='social/posts/', blank=True, null=True)
    is_public = models.BooleanField(default=True)
    likes_count = models.PositiveIntegerField(default=0)
    comments_count = models.PositiveIntegerField(default=0)
    shares_count = models.PositiveIntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['-created_at']
        verbose_name = 'Post'
        verbose_name_plural = 'Posts'
    
    def __str__(self):
        return f'Post by {self.author.username} at {self.created_at}'
    
    def get_absolute_url(self):
        return reverse('{{ app_name }}:post_detail', kwargs={'pk': self.pk})
    
    def update_counts(self):
        """Update like/comment/share counts."""
        self.likes_count = self.likes.count()
        self.comments_count = self.comments.count()
        self.shares_count = self.shares.count()
        self.save(update_fields=['likes_count', 'comments_count', 'shares_count'])
    
    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        # Update user's post count
        if hasattr(self.author, '{{ app_name }}_profile'):
            self.author.{{ app_name }}_profile.update_counts()


class Like(models.Model):
    """Post like model."""
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='{{ app_name }}_likes')
    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='likes')
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        unique_together = ['user', 'post']
        verbose_name = 'Like'
        verbose_name_plural = 'Likes'
        ordering = ['-created_at']
    
    def __str__(self):
        return f'{self.user.username} likes post {self.post.id}'
    
    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        self.post.update_counts()
    
    def delete(self, *args, **kwargs):
        post = self.post
        super().delete(*args, **kwargs)
        post.update_counts()


class Comment(models.Model):
    """Post comment model."""
    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='comments')
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='{{ app_name }}_comments')
    parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, related_name='replies')
    content = models.TextField(max_length=1000)
    likes_count = models.PositiveIntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['created_at']
        verbose_name = 'Comment'
        verbose_name_plural = 'Comments'
    
    def __str__(self):
        return f'Comment by {self.author.username} on post {self.post.id}'
    
    def get_absolute_url(self):
        return f"{self.post.get_absolute_url()}#comment-{self.id}"
    
    @property
    def is_reply(self):
        """Check if this comment is a reply."""
        return self.parent is not None
    
    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        self.post.update_counts()
    
    def delete(self, *args, **kwargs):
        post = self.post
        super().delete(*args, **kwargs)
        post.update_counts()


class CommentLike(models.Model):
    """Comment like model."""
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='{{ app_name }}_comment_likes')
    comment = models.ForeignKey(Comment, on_delete=models.CASCADE, related_name='likes')
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        unique_together = ['user', 'comment']
        verbose_name = 'Comment Like'
        verbose_name_plural = 'Comment Likes'
    
    def __str__(self):
        return f'{self.user.username} likes comment {self.comment.id}'
    
    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        self.comment.likes_count = self.comment.likes.count()
        self.comment.save(update_fields=['likes_count'])
    
    def delete(self, *args, **kwargs):
        comment = self.comment
        super().delete(*args, **kwargs)
        comment.likes_count = comment.likes.count()
        comment.save(update_fields=['likes_count'])


class Share(models.Model):
    """Post share model."""
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='{{ app_name }}_shares')
    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='shares')
    message = models.TextField(max_length=500, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        unique_together = ['user', 'post']
        verbose_name = 'Share'
        verbose_name_plural = 'Shares'
        ordering = ['-created_at']
    
    def __str__(self):
        return f'{self.user.username} shares post {self.post.id}'
    
    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        self.post.update_counts()
    
    def delete(self, *args, **kwargs):
        post = self.post
        super().delete(*args, **kwargs)
        post.update_counts()


class Notification(models.Model):
    """User notification model."""
    NOTIFICATION_TYPES = [
        ('like', 'Like'),
        ('comment', 'Comment'),
        ('follow', 'Follow'),
        ('share', 'Share'),
        ('mention', 'Mention'),
    ]
    
    recipient = models.ForeignKey(User, on_delete=models.CASCADE, related_name='{{ app_name }}_notifications')
    sender = models.ForeignKey(User, on_delete=models.CASCADE, related_name='{{ app_name }}_sent_notifications')
    notification_type = models.CharField(max_length=20, choices=NOTIFICATION_TYPES)
    message = models.CharField(max_length=255)
    is_read = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    
    # Generic foreign key fields for linking to different objects
    content_object_id = models.PositiveIntegerField(null=True, blank=True)
    
    class Meta:
        ordering = ['-created_at']
        verbose_name = 'Notification'
        verbose_name_plural = 'Notifications'
    
    def __str__(self):
        return f'Notification for {self.recipient.username}: {self.message}'
    
    def mark_as_read(self):
        """Mark notification as read."""
        self.is_read = True
        self.save(update_fields=['is_read'])