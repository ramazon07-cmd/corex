"""
Wiki-specific models for wiki app.

Generated by CoreX - Django Scaffolding Framework
"""

from django.db import models
from django.contrib.auth.models import User
from django.urls import reverse
from django.utils import timezone
from django.utils.text import slugify


class Category(models.Model):
    """Wiki page category model."""
    name = models.CharField(max_length=100, unique=True)
    slug = models.SlugField(max_length=100, unique=True)
    description = models.TextField(blank=True)
    parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, related_name='children')
    sort_order = models.PositiveIntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = 'Category'
        verbose_name_plural = 'Categories'
        ordering = ['sort_order', 'name']
    
    def __str__(self):
        return self.name
    
    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)
    
    def get_absolute_url(self):
        return reverse('wiki:category_detail', kwargs={'slug': self.slug})


class Page(models.Model):
    """Wiki page model."""
    STATUS_CHOICES = [
        ('draft', 'Draft'),
        ('published', 'Published'),
        ('archived', 'Archived'),
    ]
    
    title = models.CharField(max_length=200)
    slug = models.SlugField(max_length=200, unique=True)
    content = models.TextField()
    category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name='pages', null=True, blank=True)
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='wiki_pages')
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='draft')
    is_protected = models.BooleanField(default=False, help_text="Only admins can edit protected pages")
    meta_description = models.CharField(max_length=300, blank=True)
    tags = models.CharField(max_length=500, blank=True, help_text="Comma-separated tags")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    published_at = models.DateTimeField(null=True, blank=True)
    
    class Meta:
        ordering = ['-updated_at']
        verbose_name = 'Page'
        verbose_name_plural = 'Pages'
    
    def __str__(self):
        return self.title
    
    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.title)
        if self.status == 'published' and not self.published_at:
            self.published_at = timezone.now()
        super().save(*args, **kwargs)
    
    def get_absolute_url(self):
        return reverse('wiki:page_detail', kwargs={'slug': self.slug})
    
    @property
    def current_revision(self):
        """Get the current revision of the page."""
        return self.revisions.filter(is_current=True).first()


class PageRevision(models.Model):
    """Page revision history model."""
    page = models.ForeignKey(Page, on_delete=models.CASCADE, related_name='revisions')
    content = models.TextField()
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='wiki_revisions')
    comment = models.CharField(max_length=200, blank=True, help_text="Describe what changed")
    is_current = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['-created_at']
        verbose_name = 'Page Revision'
        verbose_name_plural = 'Page Revisions'
    
    def __str__(self):
        return f'Revision of {self.page.title} by {self.author.username}'
    
    def save(self, *args, **kwargs):
        if self.is_current:
            # Make sure only one revision is current
            PageRevision.objects.filter(page=self.page).update(is_current=False)
        super().save(*args, **kwargs)


class PageView(models.Model):
    """Track page views."""
    page = models.ForeignKey(Page, on_delete=models.CASCADE, related_name='page_views')
    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
    ip_address = models.GenericIPAddressField()
    user_agent = models.TextField(blank=True)
    viewed_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['-viewed_at']
        verbose_name = 'Page View'
        verbose_name_plural = 'Page Views'
    
    def __str__(self):
        return f'View of {self.page.title}'


class PageBookmark(models.Model):
    """User bookmarks for pages."""
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='wiki_bookmarks')
    page = models.ForeignKey(Page, on_delete=models.CASCADE, related_name='bookmarks')
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        unique_together = ['user', 'page']
        ordering = ['-created_at']
        verbose_name = 'Page Bookmark'
        verbose_name_plural = 'Page Bookmarks'
    
    def __str__(self):
        return f'{self.user.username} bookmarked {self.page.title}'