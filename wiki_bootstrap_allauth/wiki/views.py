"""
Wiki Views
Generated by CoreX v1.0.0
"""

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.core.paginator import Paginator
from django.db.models import Q
from django.utils.text import slugify
from .models import *



def page_list(request):
    query = request.GET.get('q')
    pages = Page.objects.filter(status='published')
    
    if query:
        pages = pages.filter(
            Q(title__icontains=query) | Q(content__icontains=query)
        )
    
    paginator = Paginator(pages, 20)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    return render(request, 'wiki/list.html', {
        'page_obj': page_obj,
        'pages': page_obj,
        'query': query
    })


def page_detail(request, slug):
    page = get_object_or_404(Page, slug=slug, status='published')
    
    return render(request, 'wiki/detail.html', {
        'page': page
    })


@login_required
def page_create(request):
    if request.method == 'POST':
        title = request.POST.get('title', '').strip()
        content = request.POST.get('content', '').strip()
        status = request.POST.get('status', 'draft')
        tags = request.POST.get('tags', '').strip()
        meta_description = request.POST.get('meta_description', '').strip()
        
        if title and content:
            # Create page
            page = Page.objects.create(
                title=title,
                slug=slugify(title),
                content=content,
                author=request.user,
                status=status,
                tags=tags,
                meta_description=meta_description
            )
            messages.success(request, f'Page "{page.title}" created successfully!')
            return redirect('wiki:page_detail', slug=page.slug)
        else:
            messages.error(request, 'Title and content are required.')
    
    # Create empty page object for template
    page = Page()
    return render(request, 'wiki/form.html', {
        'page': page
    })


@login_required
def page_edit(request, slug):
    page = get_object_or_404(Page, slug=slug)
    
    # Check permissions (only author or admin can edit)
    if not (request.user == page.author or request.user.is_staff):
        messages.error(request, 'You do not have permission to edit this page.')
        return redirect('wiki:page_detail', slug=page.slug)
    
    if request.method == 'POST':
        title = request.POST.get('title', '').strip()
        content = request.POST.get('content', '').strip()
        status = request.POST.get('status', 'draft')
        tags = request.POST.get('tags', '').strip()
        meta_description = request.POST.get('meta_description', '').strip()
        
        if title and content:
            # Update page
            page.title = title
            page.content = content
            page.status = status
            page.tags = tags
            page.meta_description = meta_description
            
            # Update slug if title changed
            new_slug = slugify(title)
            if new_slug != page.slug:
                page.slug = new_slug
            
            page.save()
            messages.success(request, f'Page "{page.title}" updated successfully!')
            return redirect('wiki:page_detail', slug=page.slug)
        else:
            messages.error(request, 'Title and content are required.')
    
    return render(request, 'wiki/form.html', {
        'page': page
    })


